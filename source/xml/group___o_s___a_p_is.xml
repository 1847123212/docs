<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="group___o_s___a_p_is" kind="group">
    <compoundname>OS_APIs</compoundname>
    <title>OS APIs</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___o_s___a_p_is_1ga6e548a8a372fc51cbb02cc6204a490fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tls_os_timer_init</definition>
        <argsstring>(void)</argsstring>
        <name>tls_os_timer_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function is used to register OS tick timer irq. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1ga8181d0c2981c83973af2255687e6a681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tls_os_time_tick</definition>
        <argsstring>(void *p)</argsstring>
        <name>tls_os_time_tick</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>This function is used to tick handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*p</parametername>
</parameternamelist>
<parameterdescription>
<para>argument</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1ga559145726e6c0c16424a59a0da20dbf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tls_os_init</definition>
        <argsstring>(void *arg)</argsstring>
        <name>tls_os_init</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>This function is used to initialize OS common resource. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*arg</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1gaaf9a9594681605a9a72c087387fbaa4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tls_os_start_scheduler</definition>
        <argsstring>(void)</argsstring>
        <name>tls_os_start_scheduler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function is used to start task scheduler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1ga105ee06f8df6a4ef564249a1e8704451" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tls_os_get_type</definition>
        <argsstring>(void)</argsstring>
        <name>tls_os_get_type</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function is used to get OS type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>OS_UCOSII </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>OS_FREERTOS</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1ga1b139e703d90deb3e25b2807641727fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_task_create</definition>
        <argsstring>(tls_os_task_t *task, const char *name, void(*entry)(void *param), void *param, u8 *stk_start, u32 stk_size, u32 prio, u32 flag)</argsstring>
        <name>tls_os_task_create</name>
        <param>
          <type><ref refid="wm__osal_8h_1a9c6a7a2c332763f53835c9c473c0205c" kindref="member">tls_os_task_t</ref> *</type>
          <declname>task</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void(*)(void *param)</type>
          <declname>entry</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>param</declname>
        </param>
        <param>
          <type>u8 *</type>
          <declname>stk_start</declname>
        </param>
        <param>
          <type>u32</type>
          <declname>stk_size</declname>
        </param>
        <param>
          <type>u32</type>
          <declname>prio</declname>
        </param>
        <param>
          <type>u32</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>This function is used to have uC/OS-II manage the execut- ion of a task. Tasks can either be created prior to the start of multitasking or by a running task. A task cannot be created by an ISR. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*task</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the task </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>the task&apos;s name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">entry</parametername>
</parameternamelist>
<parameterdescription>
<para>the task&apos;s entry function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">param</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an optional data area which can be used to pass parameters to the task when the task first executes. Where the task is concerned it thinks it was invoked and passed the argument &apos;param&apos; as follows: void Task (void *param) { for (;;) { Task code; } } </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">*stk_start</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the task&apos;s bottom of stack. Address must be between 0x20000000 and 0x20028000 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stk_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the stack in number of elements. If OS_STK is set to INT8U, &apos;stk_size&apos; corresponds to the number of bytes available. If OS_STK is set to INT16U, &apos;stk_size&apos; contains the number of 16-bit entries available. Finally, if OS_STK is set to INT32U, &apos;stk_size&apos; contains the number of 32-bit entries available on the stack. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prio</parametername>
</parameternamelist>
<parameterdescription>
<para>the task&apos;s priority. A unique priority MUST be assigned to each task and the lower the number, the higher the priority. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flag</parametername>
</parameternamelist>
<parameterdescription>
<para>contains additional information about the behavior of the task</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>the call was successful. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>1) Stack Range: [stk_start, stk_start + stk_size) must be between 0x20000000 and 0x20028000 2) task stack: Using static memory like array, not using dynamic memory. 3) And if you use static memory like array (large size) as data storage in your application, we suggest you change it to dynamic memory by tls_mem_alloc. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1ga44a382aec34d8ae13475b268ac7ef6df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_task_del</definition>
        <argsstring>(u8 prio, void(*freefun)(void))</argsstring>
        <name>tls_os_task_del</name>
        <param>
          <type>u8</type>
          <declname>prio</declname>
        </param>
        <param>
          <type>void(*)(void)</type>
          <declname>freefun</declname>
        </param>
        <briefdescription>
<para>This function allows you to delete a task. The calling task can delete itself by its own priority number. The deleted task is returned to the dormant state and can be re-activated by creating the deleted task again. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">prio</parametername>
</parameternamelist>
<parameterdescription>
<para>task priority to delete </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">(*freefun)(void)</parametername>
</parameternamelist>
<parameterdescription>
<para>function to free resource</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>the call is successful </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1ga0ee6b456ea9cf944312c18031b3b288a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_mutex_create</definition>
        <argsstring>(u8 prio, tls_os_mutex_t **mutex)</argsstring>
        <name>tls_os_mutex_create</name>
        <param>
          <type>u8</type>
          <declname>prio</declname>
        </param>
        <param>
          <type><ref refid="wm__osal_8h_1aab72e7b139df8aeb44dd74be6ec7b2b7" kindref="member">tls_os_mutex_t</ref> **</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>This function creates a mutual exclusion semaphore. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">prio</parametername>
</parameternamelist>
<parameterdescription>
<para>the priority to use when accessing the mutual exclusion semaphore. In other words, when the semaphore is acquired and a higher priority task attempts to obtain the semaphore then the priority of the task owning the semaphore is raised to this priority. It is assumed that you will specify a priority that is LOWER in value than ANY of the tasks competing for the mutex. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">**mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the event control clock (OS_EVENT) associated with the created mutex.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>the call was successful </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>1) The LEAST significant 8 bits of &apos;.OSEventCnt&apos; are used to hold the priority number of the task owning the mutex or 0xFF if no task owns the mutex. 2) The MOST significant 8 bits of &apos;.OSEventCnt&apos; are used to hold the priority number to use to reduce priority inversion. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1gae756400c5aab47548f7ec1b0da295e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_mutex_delete</definition>
        <argsstring>(tls_os_mutex_t *mutex)</argsstring>
        <name>tls_os_mutex_delete</name>
        <param>
          <type><ref refid="wm__osal_8h_1aab72e7b139df8aeb44dd74be6ec7b2b7" kindref="member">tls_os_mutex_t</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>This function deletes a mutual exclusion semaphore and readies all tasks pending on the it. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the event control block associated with the desired mutex</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The call was successful and the mutex was deleted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>1) This function must be used with care. Tasks that would normally expect the presence of the mutex MUST check the return code of OSMutexPend(). 2) This call can potentially disable interrupts for a long time. The interrupt disable time is directly proportional to the number of tasks waiting on the mutex. 3) Because ALL tasks pending on the mutex will be readied, you MUST be careful because the resource(s) will no longer be guarded by the mutex. 4) IMPORTANT: In the &apos;OS_DEL_ALWAYS&apos; case, we assume that the owner of the Mutex (if there is one) is ready-to-run and is thus NOT pending on another kernel object or has delayed itself.In other words, if a task owns the mutex being deleted,that task will be made ready-to-run at its original priority. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1ga8160efbe5307f96f6e2ed0c2cea34572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_mutex_acquire</definition>
        <argsstring>(tls_os_mutex_t *mutex, u32 wait_time)</argsstring>
        <name>tls_os_mutex_acquire</name>
        <param>
          <type><ref refid="wm__osal_8h_1aab72e7b139df8aeb44dd74be6ec7b2b7" kindref="member">tls_os_mutex_t</ref> *</type>
          <declname>mutex</declname>
        </param>
        <param>
          <type>u32</type>
          <declname>wait_time</declname>
        </param>
        <briefdescription>
<para>This function waits for a mutual exclusion semaphore. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the event control block associated with the desired mutex </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">wait_time</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional timeout period (in clock ticks). If non-zero, your task will wait for the resource up to the amount of time specified by this argument. If you specify 0, however, your task will wait forever at the specified mutex or, until the resource becomes available.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The call was successful and your task owns the mutex </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>1) The task that owns the Mutex MUST NOT pend on any other event while it owns the mutex. 2) You MUST NOT change the priority of the task that owns the mutex </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1gacd5908ad43e8a0a7dd5c69d521eb2bb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_mutex_release</definition>
        <argsstring>(tls_os_mutex_t *mutex)</argsstring>
        <name>tls_os_mutex_release</name>
        <param>
          <type><ref refid="wm__osal_8h_1aab72e7b139df8aeb44dd74be6ec7b2b7" kindref="member">tls_os_mutex_t</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>This function signals a mutual exclusion semaphore. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the event control block associated with the desired mutex</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The call was successful and the mutex was signaled. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="312" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1gab0d06b8435947367b600a83efde816fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_sem_create</definition>
        <argsstring>(tls_os_sem_t **sem, u32 cnt)</argsstring>
        <name>tls_os_sem_create</name>
        <param>
          <type><ref refid="wm__osal_8h_1ae7411af4399d75e628f5a3d6c7421b8e" kindref="member">tls_os_sem_t</ref> **</type>
          <declname>sem</declname>
        </param>
        <param>
          <type>u32</type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
<para>This function creates a semaphore. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">**sem</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the event control block (OS_EVENT) associated with the created semaphore </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial value for the semaphore. If the value is 0, no resource is available (or no event has occurred). You initialize the semaphore to a non-zero value to specify how many resources are available (e.g. if you have 10 resources, you would initialize the semaphore to 10).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>success,The call was successful </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1gafa3f3c0039e6252d71d8e4a7d4e19b2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_sem_delete</definition>
        <argsstring>(tls_os_sem_t *sem)</argsstring>
        <name>tls_os_sem_delete</name>
        <param>
          <type><ref refid="wm__osal_8h_1ae7411af4399d75e628f5a3d6c7421b8e" kindref="member">tls_os_sem_t</ref> *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
<para>This function deletes a semaphore and readies all tasks pending on the semaphore. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*sem</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the event control block associated with the desired semaphore</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1gaeb1b502d11d25b65bba7e6cb16e90078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_sem_acquire</definition>
        <argsstring>(tls_os_sem_t *sem, u32 wait_time)</argsstring>
        <name>tls_os_sem_acquire</name>
        <param>
          <type><ref refid="wm__osal_8h_1ae7411af4399d75e628f5a3d6c7421b8e" kindref="member">tls_os_sem_t</ref> *</type>
          <declname>sem</declname>
        </param>
        <param>
          <type>u32</type>
          <declname>wait_time</declname>
        </param>
        <briefdescription>
<para>This function waits for a semaphore. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*sem</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the event control block associated with the desired semaphore </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">wait_time</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional timeout period (in clock ticks). If non-zero, your task will wait for the resource up to the amount of time specified by this argument.If you specify 0, however, your task will wait forever at the specified semaphore or, until the resource becomes available (or the event occurs).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="367" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1ga894bc38a19059b8f084f96f4edc5dd96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_sem_release</definition>
        <argsstring>(tls_os_sem_t *sem)</argsstring>
        <name>tls_os_sem_release</name>
        <param>
          <type><ref refid="wm__osal_8h_1ae7411af4399d75e628f5a3d6c7421b8e" kindref="member">tls_os_sem_t</ref> *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
<para>This function signals a semaphore. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*sem</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the event control block associated with the desired semaphore</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="381" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1gabe3b59bc50f78636edf1fd3d1d3afe6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_sem_set</definition>
        <argsstring>(tls_os_sem_t *sem, u16 cnt)</argsstring>
        <name>tls_os_sem_set</name>
        <param>
          <type><ref refid="wm__osal_8h_1ae7411af4399d75e628f5a3d6c7421b8e" kindref="member">tls_os_sem_t</ref> *</type>
          <declname>sem</declname>
        </param>
        <param>
          <type>u16</type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
<para>This function sets the semaphore count to the value spec- ified as an argument.Typically,this value would be 0.You would typically use this function when a semaphore is used as a signaling mechanism and, you want to reset the count value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*sem</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the event control block </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>the new value for the semaphore count. You would pass 0 to reset the semaphore count.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="399" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1gac3092293cbb017e7a042ca07d462b0e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_queue_create</definition>
        <argsstring>(tls_os_queue_t **queue, u32 queue_size)</argsstring>
        <name>tls_os_queue_create</name>
        <param>
          <type><ref refid="wm__osal_8h_1a8f5e1923e4ef3ac81dc40d138a04380d" kindref="member">tls_os_queue_t</ref> **</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>u32</type>
          <declname>queue_size</declname>
        </param>
        <briefdescription>
<para>This function creates a message queue if free event cont- rol blocks are available. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">**queue</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the event control clock (OS_EVENT) associated with the created queue </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">queue_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements in the storage area</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="415" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1gac4f8539b60be31ce8cf59e3d7b86f5b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_queue_delete</definition>
        <argsstring>(tls_os_queue_t *queue)</argsstring>
        <name>tls_os_queue_delete</name>
        <param>
          <type><ref refid="wm__osal_8h_1a8f5e1923e4ef3ac81dc40d138a04380d" kindref="member">tls_os_queue_t</ref> *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>This function deletes a message queue and readies all tasks pending on the queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*queue</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the event control block associated with the desired queue</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="429" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1ga881f3210ba2d8701c8f59a956b6bb1ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_queue_send</definition>
        <argsstring>(tls_os_queue_t *queue, void *msg, u32 msg_size)</argsstring>
        <name>tls_os_queue_send</name>
        <param>
          <type><ref refid="wm__osal_8h_1a8f5e1923e4ef3ac81dc40d138a04380d" kindref="member">tls_os_queue_t</ref> *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>u32</type>
          <declname>msg_size</declname>
        </param>
        <briefdescription>
<para>This function sends a message to a queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*queue</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the event control block associated with the desired queue </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">*msg</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the message to send. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>message size</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1gad2da86e8e8514f3fa119cf853421f9f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_queue_flush</definition>
        <argsstring>(tls_os_queue_t *queue)</argsstring>
        <name>tls_os_queue_flush</name>
        <param>
          <type><ref refid="wm__osal_8h_1a8f5e1923e4ef3ac81dc40d138a04380d" kindref="member">tls_os_queue_t</ref> *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>This function is used to flush the contents of the message queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*queue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="459" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1ga5be384c667ae9daa58dd92c8518482d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_queue_receive</definition>
        <argsstring>(tls_os_queue_t *queue, void **msg, u32 msg_size, u32 wait_time)</argsstring>
        <name>tls_os_queue_receive</name>
        <param>
          <type><ref refid="wm__osal_8h_1a8f5e1923e4ef3ac81dc40d138a04380d" kindref="member">tls_os_queue_t</ref> *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>u32</type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type>u32</type>
          <declname>wait_time</declname>
        </param>
        <briefdescription>
<para>This function waits for a message to be sent to a queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*queue</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the event control block associated with the desired queue </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">**msg</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the message received </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>message size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">wait_time</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional timeout period (in clock ticks). If non-zero, your task will wait for a message to arrive at the queue up to the amount of time specified by this argument. If you specify 0, however, your task will wait forever at the specified queue or, until a message arrives.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="481" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1ga9e3e36e61c1c207d490cf224a842046c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_mailbox_create</definition>
        <argsstring>(tls_os_mailbox_t **mailbox, u32 mailbox_size)</argsstring>
        <name>tls_os_mailbox_create</name>
        <param>
          <type><ref refid="wm__osal_8h_1a774fbd9d4e6b9ca6f6de656bada11a8b" kindref="member">tls_os_mailbox_t</ref> **</type>
          <declname>mailbox</declname>
        </param>
        <param>
          <type>u32</type>
          <declname>mailbox_size</declname>
        </param>
        <briefdescription>
<para>This function creates a message mailbox if free event control blocks are available. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">**mailbox</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the event control clock (OS_EVENT) associated with the created mailbox </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mailbox_size</parametername>
</parameternamelist>
<parameterdescription>
<para>size</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="498" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1gafd7053c37a7c796457b5e0bf7504b977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_mailbox_delete</definition>
        <argsstring>(tls_os_mailbox_t *mailbox)</argsstring>
        <name>tls_os_mailbox_delete</name>
        <param>
          <type><ref refid="wm__osal_8h_1a774fbd9d4e6b9ca6f6de656bada11a8b" kindref="member">tls_os_mailbox_t</ref> *</type>
          <declname>mailbox</declname>
        </param>
        <briefdescription>
<para>This function deletes a mailbox and readies all tasks pending on the mailbox. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*mailbox</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the event control block associated with the desired mailbox.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="512" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1ga25ae765d00938f4b66d89c9850898a48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_mailbox_send</definition>
        <argsstring>(tls_os_mailbox_t *mailbox, void *msg)</argsstring>
        <name>tls_os_mailbox_send</name>
        <param>
          <type><ref refid="wm__osal_8h_1a774fbd9d4e6b9ca6f6de656bada11a8b" kindref="member">tls_os_mailbox_t</ref> *</type>
          <declname>mailbox</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>This function sends a message to a mailbox. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*mailbox</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the event control block associated with the desired mailbox </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">*msg</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the message to send. You MUST NOT send a NULL pointer</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="527" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1gae93489ddaaf44c3f7cb27eb8186410bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_mailbox_receive</definition>
        <argsstring>(tls_os_mailbox_t *mailbox, void **msg, u32 wait_time)</argsstring>
        <name>tls_os_mailbox_receive</name>
        <param>
          <type><ref refid="wm__osal_8h_1a774fbd9d4e6b9ca6f6de656bada11a8b" kindref="member">tls_os_mailbox_t</ref> *</type>
          <declname>mailbox</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>u32</type>
          <declname>wait_time</declname>
        </param>
        <briefdescription>
<para>This function waits for a message to be sent to a mailbox. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*mailbox</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the event control block associated with the desired mailbox </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">**msg</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the message received </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">wait_time</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional timeout period (in clock ticks). If non-zero, your task will wait for a message to arrive at the mailbox up to the amount of time specified by this argument. If you specify 0, however, your task will wait forever at the specified mailbox or, until a message arrives.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="550" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1ga6f112f2f45d012d4dcf18d11908a705d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u32</type>
        <definition>u32 tls_os_get_time</definition>
        <argsstring>(void)</argsstring>
        <name>tls_os_get_time</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function is used by your application to obtain the current value of the 32-bit counter which keeps track of the number of clock ticks. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>current</parametername>
</parameternamelist>
<parameterdescription>
<para>value of OSTime</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="565" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1ga2e828c3b756722bcf56a8ccba7ed561a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>u32</type>
        <definition>u32 tls_os_set_critical</definition>
        <argsstring>(void)</argsstring>
        <name>tls_os_set_critical</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function is used to disable interrupts by preserving the state of interrupts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>cpu_sr</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="577" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1gaa9582663dfc6f3bbd5f3e3f65b506989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tls_os_release_critical</definition>
        <argsstring>(u32 cpu_sr)</argsstring>
        <name>tls_os_release_critical</name>
        <param>
          <type>u32</type>
          <declname>cpu_sr</declname>
        </param>
        <briefdescription>
<para>This function is used to enable interrupts by preserving the state of interrupts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cpu_sr</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="589" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1ga63e039673b40600e0f80cd21032fda15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="wm__osal_8h_1a31b3a3c05a78bf20c41cdfb735bbd281" kindref="member">tls_os_status_t</ref></type>
        <definition>tls_os_status_t tls_os_timer_create</definition>
        <argsstring>(tls_os_timer_t **timer, TLS_OS_TIMER_CALLBACK callback, void *callback_arg, u32 period, bool repeat, u8 *name)</argsstring>
        <name>tls_os_timer_create</name>
        <param>
          <type><ref refid="wm__osal_8h_1a1e7345dbbf9df96b581017e1c053b04b" kindref="member">tls_os_timer_t</ref> **</type>
          <declname>timer</declname>
        </param>
        <param>
          <type><ref refid="wm__osal_8h_1a87ee168760be7b82abba354009c129e5" kindref="member">TLS_OS_TIMER_CALLBACK</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>callback_arg</declname>
        </param>
        <param>
          <type>u32</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>repeat</declname>
        </param>
        <param>
          <type>u8 *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>This function is called by your application code to create a timer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">**timer</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an OS_TMR data structure. This is the &apos;handle&apos; that your application will use to reference the timer created </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a callback function that will be called when the timer expires. The callback function must be declared as follows void MyCallback (OS_TMR *ptmr, void *p_arg); </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">*callback_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>argument (a pointer) that is passed to the callback function when it is called </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">period</parametername>
</parameternamelist>
<parameterdescription>
<para>The &apos;period&apos; being repeated for the timer. If you specified &apos;OS_TMR_OPT_PERIODIC&apos; as an option, when the timer expires, it will automatically restart with the same period. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">repeat</parametername>
</parameternamelist>
<parameterdescription>
<para>if repeat </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">*name</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an ASCII string that is used to name the timer. Names are useful for debugging.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="619" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1ga62653724780698fe82fce98c5a3abbe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tls_os_timer_start</definition>
        <argsstring>(tls_os_timer_t *timer)</argsstring>
        <name>tls_os_timer_start</name>
        <param>
          <type><ref refid="wm__osal_8h_1a1e7345dbbf9df96b581017e1c053b04b" kindref="member">tls_os_timer_t</ref> *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
<para>This function is called by your application code to start a timer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*timer</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an OS_TMR</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="636" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1ga0ae709f759984ca3c0f86f492f505ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tls_os_timer_change</definition>
        <argsstring>(tls_os_timer_t *timer, u32 ticks)</argsstring>
        <name>tls_os_timer_change</name>
        <param>
          <type><ref refid="wm__osal_8h_1a1e7345dbbf9df96b581017e1c053b04b" kindref="member">tls_os_timer_t</ref> *</type>
          <declname>timer</declname>
        </param>
        <param>
          <type>u32</type>
          <declname>ticks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="649" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1gad2269aea48c5d9a9b076dfed8eabe24d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tls_os_timer_stop</definition>
        <argsstring>(tls_os_timer_t *timer)</argsstring>
        <name>tls_os_timer_stop</name>
        <param>
          <type><ref refid="wm__osal_8h_1a1e7345dbbf9df96b581017e1c053b04b" kindref="member">tls_os_timer_t</ref> *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
<para>This function is called by your application code to stop a timer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*timer</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the timer to stop.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="661" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1ga55fd918baee77b277d4cb3ffffe663f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tls_os_timer_delete</definition>
        <argsstring>(tls_os_timer_t *timer)</argsstring>
        <name>tls_os_timer_delete</name>
        <param>
          <type><ref refid="wm__osal_8h_1a1e7345dbbf9df96b581017e1c053b04b" kindref="member">tls_os_timer_t</ref> *</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
<para>This function is called by your application code to delete a timer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*timer</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the timer to delete</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TLS_OS_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TLS_OS_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>failed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="674" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1ga1e22e6c6c8648038ada87ae223d52571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tls_os_time_delay</definition>
        <argsstring>(u32 ticks)</argsstring>
        <name>tls_os_time_delay</name>
        <param>
          <type>u32</type>
          <declname>ticks</declname>
        </param>
        <briefdescription>
<para>This function is called to delay execution of the curren- tly running task until the specified number of system ticks expires. This, of course, directly equates to delaying the current task for some time to expire. No delay will result If the specified delay is 0. If the specified delay is greater than 0 then, a context switch will result. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ticks</parametername>
</parameternamelist>
<parameterdescription>
<para>the time delay that the task will be suspended in number of clock &apos;ticks&apos;.Note that by specifying 0, the task will not be delayed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="693" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___o_s___a_p_is_1ga91d4da43735ac05074a9756d7e2cf9b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tls_os_disp_task_stat_info</definition>
        <argsstring>(void)</argsstring>
        <name>tls_os_disp_task_stat_info</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function is used to display stat info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="note"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Include/OS/wm_osal.h" line="705" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Operate system APIs. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
